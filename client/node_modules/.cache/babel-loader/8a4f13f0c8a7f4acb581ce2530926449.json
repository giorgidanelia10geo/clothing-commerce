{"ast":null,"code":"import _regeneratorRuntime from\"/Users/gd/Documents/Dev/react/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStartAsync),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionStart),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(shopSaga);import{takeEvery,all,call,put}from'redux-saga/effects';import ShopActionsTypes from'./shopActionsTypes';import{firestore,convertCollectionSnapshotToMap}from'../../utils/firebase.utils';import{fetchCollectionsSuccess,fetchCollectionsFailure}from'./shopAction';export function fetchCollectionsStartAsync(){var collectionsRef,snapshot,collectionsMap;return _regeneratorRuntime.wrap(function fetchCollectionsStartAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;collectionsRef=firestore.collection('collections');_context.next=4;return collectionsRef.get();case 4:snapshot=_context.sent;_context.next=7;return call(convertCollectionSnapshotToMap,snapshot);case 7:collectionsMap=_context.sent;_context.next=10;return put(fetchCollectionsSuccess(collectionsMap));case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put(fetchCollectionsFailure(_context.t0.message));case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}export function fetchCollectionStart(){return _regeneratorRuntime.wrap(function fetchCollectionStart$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(ShopActionsTypes.FETCH_COLLECTION_START,fetchCollectionsStartAsync);case 2:case\"end\":return _context2.stop();}}},_marked2);}export function shopSaga(){return _regeneratorRuntime.wrap(function shopSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([call(fetchCollectionStart)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/Users/gd/Documents/Dev/react/crwn-clothing/client/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsStartAsync","fetchCollectionStart","shopSaga","takeEvery","all","call","put","ShopActionsTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","collectionsRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTION_START"],"mappings":"kNAMiBA,0B,iDAWAC,oB,iDAOAC,Q,EAxBjB,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,IAAzB,CAA+BC,GAA/B,KAA0C,oBAA1C,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,OAASC,SAAT,CAAoBC,8BAApB,KAA0D,4BAA1D,CACA,OAASC,uBAAT,CAAkCC,uBAAlC,KAAiE,cAAjE,CAGA,MAAO,SAAUX,CAAAA,0BAAV,iMAEGY,cAFH,CAEoBJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAFpB,iBAGc,MAAMD,CAAAA,cAAc,CAACE,GAAf,EAAN,CAHd,OAGGC,QAHH,+BAIoB,MAAMV,CAAAA,IAAI,CAACI,8BAAD,CAAiCM,QAAjC,CAAV,CAJpB,OAIGC,cAJH,gCAKH,MAAMV,CAAAA,GAAG,CAACI,uBAAuB,CAACM,cAAD,CAAxB,CAAT,CALG,0GAOH,MAAMV,CAAAA,GAAG,CAACK,uBAAuB,CAAC,YAAMM,OAAP,CAAxB,CAAT,CAPG,qEAWP,MAAO,SAAUhB,CAAAA,oBAAV,oJACL,MAAME,CAAAA,SAAS,CACbI,gBAAgB,CAACW,sBADJ,CAEblB,0BAFa,CAAf,CADK,wDAOP,MAAO,SAAUE,CAAAA,QAAV,wIACL,MAAME,CAAAA,GAAG,CAAC,CAACC,IAAI,CAACJ,oBAAD,CAAL,CAAD,CAAT,CADK","sourcesContent":["import { takeEvery, all, call, put } from 'redux-saga/effects'\nimport ShopActionsTypes from './shopActionsTypes'\nimport { firestore, convertCollectionSnapshotToMap } from '../../utils/firebase.utils'\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shopAction'\n\n\nexport function* fetchCollectionsStartAsync() {\n  try {\n    const collectionsRef = firestore.collection('collections')\n    const snapshot = yield collectionsRef.get()\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot)\n    yield put(fetchCollectionsSuccess(collectionsMap))\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message))\n  }\n}\n\nexport function* fetchCollectionStart() {\n  yield takeEvery(\n    ShopActionsTypes.FETCH_COLLECTION_START,\n    fetchCollectionsStartAsync\n  )\n}\n\nexport function* shopSaga() {\n  yield all([call(fetchCollectionStart)])\n}"]},"metadata":{},"sourceType":"module"}