{"ast":null,"code":"import{firestore,convertCollectionSnapshotToMap}from'../../utils/firebase.utils';import ShopActionsTypes from'./shopActionsTypes';export var fetchCollectionsStart=function fetchCollectionsStart(){return{type:ShopActionsTypes.FETCH_COLLECTION_START};};export var fetchCollectionsSuccess=function fetchCollectionsSuccess(collectionsMap){return{type:ShopActionsTypes.FETCH_COLLECTION_SUCCESS,payload:collectionsMap};};export var fetchCollectionsFailure=function fetchCollectionsFailure(errorMessage){return{type:ShopActionsTypes.FETCH_COLLECTION_FAILURE,payload:errorMessage};};export var fetchCollectionsStartAsync=function fetchCollectionsStartAsync(){return function(dispatch){var collectionsRef=firestore.collection('collections');dispatch(fetchCollectionsStart());collectionsRef.get().then(function(snapshot){var collectionsMap=convertCollectionSnapshotToMap(snapshot);dispatch(fetchCollectionsSuccess(collectionsMap));}).then(function(err){return dispatch(fetchCollectionsFailure(err));});};};","map":{"version":3,"sources":["/Users/gd/Documents/Dev/react/crwn-clothing/client/src/redux/shop/shopAction.js"],"names":["firestore","convertCollectionSnapshotToMap","ShopActionsTypes","fetchCollectionsStart","type","FETCH_COLLECTION_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTION_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTION_FAILURE","fetchCollectionsStartAsync","dispatch","collectionsRef","collection","get","then","snapshot","err"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,8BAApB,KAA0D,4BAA1D,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,SAAO,CAC1CC,IAAI,CAAEF,gBAAgB,CAACG,sBADmB,CAAP,EAA9B,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,QAAK,CACxDH,IAAI,CAAEF,gBAAgB,CAACM,wBADiC,CAExDC,OAAO,CAAEF,cAF+C,CAAL,EAA9C,CAKP,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,YAAY,QAAK,CACtDP,IAAI,CAAEF,gBAAgB,CAACU,wBAD+B,CAEtDH,OAAO,CAAEE,YAF6C,CAAL,EAA5C,CAKP,MAAO,IAAME,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,SAAM,UAAAC,QAAQ,CAAI,CAC1D,GAAMC,CAAAA,cAAc,CAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAvB,CACAF,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAEAY,cAAc,CACXE,GADH,GAEGC,IAFH,CAEQ,SAAAC,QAAQ,CAAI,CAChB,GAAMZ,CAAAA,cAAc,CAAGN,8BAA8B,CAACkB,QAAD,CAArD,CACAL,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CACD,CALH,EAMGW,IANH,CAMQ,SAAAE,GAAG,QAAIN,CAAAA,QAAQ,CAACJ,uBAAuB,CAACU,GAAD,CAAxB,CAAZ,EANX,EAOD,CAXyC,EAAnC","sourcesContent":["import { firestore, convertCollectionSnapshotToMap } from '../../utils/firebase.utils'\nimport ShopActionsTypes from './shopActionsTypes'\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionsTypes.FETCH_COLLECTION_START\n})\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionsTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collectionsMap\n})\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionsTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage\n})\n\nexport const fetchCollectionsStartAsync = () => dispatch => {\n  const collectionsRef = firestore.collection('collections')\n  dispatch(fetchCollectionsStart())\n\n  collectionsRef\n    .get()\n    .then(snapshot => {\n      const collectionsMap = convertCollectionSnapshotToMap(snapshot)\n      dispatch(fetchCollectionsSuccess(collectionsMap))\n    })\n    .then(err => dispatch(fetchCollectionsFailure(err)))\n}\n"]},"metadata":{},"sourceType":"module"}